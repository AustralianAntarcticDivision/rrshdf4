
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##system.time({
> library(raadtools)
Loading required package: raster
Loading required package: sp
> library(roc)
> library(rgdal)
rgdal: version: 0.9-1, (SVN revision 518)
Geospatial Data Abstraction Library extensions to R successfully loaded
Loaded GDAL runtime: GDAL 1.11.1, released 2014/09/24
Path to GDAL shared files: /usr/share/gdal/1.11
Loaded PROJ.4 runtime: Rel. 4.8.0, 6 March 2012, [PJ_VERSION: 480]
Path to PROJ.4 shared files: (autodetected)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following object is masked from ‘package:stats’:

    filter

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> ## raw wavelengths of ocean colour data
> prdfiles <- prodfiles()
> #Sprdfiles <- subset(prdfiles, substr(basename(fullname), 14, 14) == "S")
> #Aprdfiles <- subset(prdfiles, substr(basename(fullname), 14, 14) == "A")
> 
> ##prdfiles <- prdfiles[!duplicated(prdfiles), ]
> sens <- c(MODISA = 4320, SeaWiFS = 2160)
> areas <- c(MODISA = 4.64, SeaWiFS = 9.28)
> projll <- commonprojections$longlat
> 
> isens <- 1
> rrsfiles1 <- ocfiles(product = names(sens)[isens], varname = "RRS")
> rrsfiles1$NUMROWS <- sens[isens]
> isens <- 2
> rrsfiles2 <- ocfiles(product = names(sens)[isens], varname = "RRS")
> rrsfiles2$NUMROWS <- sens[isens]
> 
> rrsfiles <- rbind(rrsfiles1, rrsfiles2)
> rrsfiles <- rrsfiles[order(rrsfiles$date), ]
> 
> prdfiles <- subset(prdfiles, date >= min(rrsfiles$date))
> kdfiles <- ocfiles(product = names(sens)[isens], varname = "KD490")
> pocfiles <- ocfiles(product = names(sens)[isens], varname = "POC")
> 
> asub <- rrsfiles$date >= min(prdfiles$date) & rrsfiles$date <= max(prdfiles$date)
> rrsfiles <- rrsfiles[asub, ]
> kdfiles <- kdfiles[asub, ]
> pocfiles <- pocfiles[asub, ]
> all.equal(rrsfiles$date, kdfiles$date)
[1] "'is.NA' value mismatch: 3528 in current 0 in target"
> all.equal(kdfiles$date, pocfiles$date)
[1] TRUE
> 
> 
> ext <- extent(-180, 180, -90, -30)
> Abins <- crop_init(initbin(4320), ext)
> Sbins <- crop_init(initbin(2160), ext)
> 
> ## chunk size in days
> chunkdays <- 8
> dates <- seq(min(prdfiles$date), max(prdfiles$date) + chunkdays * 24 * 3600, by = "1 day")
> datefactor <- cut(dates, "8 days")
> 
> 
> jdate <- 21
> grdsumm <- NULL
> 
> for (jdate in seq(nlevels(datefactor))) {
+   bigdat <- NULL
+   jdates <- dates[datefactor == levels(datefactor)[jdate]]
+   for (idate in seq_along(jdates)) {
+     date <- jdates[idate]
+     ifiles <- which(abs(difftime(jdates[idate], rrsfiles$date, units = "days")) < 2)
+     if (length(ifiles) > 0) {
+       x <- list(bin_num = numeric(), chla = numeric(), kd = numeric(), poc = numeric(), area_km2 = numeric())
+       for (afile in ifiles) {
+         x0 <- readL3(rrsfiles$fullname[afile], check = FALSE) 
+         sensor <- c(A = "MODISA", S = "SeaWiFS")[roc:::.filetok(x0$filename)$sensor]
+         bins <- if(sensor == "MODISA") Abins else Sbins
+         x0 <- roc:::.subsetL3(x0, x0$bin_num %in% bins)
+         x0$area_km2 <- rep(areas[sensor], length(x0$bin_num))
+         xy <- bin2lonlat(x0$bin_num, x0$NUMROWS)
+         
+         suppressWarnings(x0$chla <- chla(x0, 
+                                          sensor = sensor, 
+                                          algo = "johnson"))
+         x$bin_num <- c(x$bin_num, x0$bin_num)
+         x$chla <- c(x$chla, x0$chla)
+         x$NUMROWS <- c(x$NUMROWS, rep(unname(sens[sensor]), length(x0$bin_num)))
+         x$x <- c(x$x, xy$x)
+         x$y <- c(x$y, xy$y)
+         
+         x1 <- readL3(kdfiles$fullname[afile], check = FALSE) 
+         x1 <- roc:::.subsetL3(x1, x1$bin_num %in% bins)
+         x$kd <- c(x$kd, (x1$Kd_490_sum / x1$weights)[match(x0$bin_num, x1$bin_num)])
+         
+         x2 <- readL3(pocfiles$fullname[afile], check = FALSE) 
+         x2 <- roc:::.subsetL3(x2, x2$bin_num %in% bins)
+         
+         x$poc <- c(x$poc, (x2$poc_sum / x2$weights)[match(x0$bin_num, x2$bin_num)])
+         x$area_km2 <- c(x$area_km2, x0$area_km2)
+         
+       }
+       
+       dat0 <- as_data_frame(x)
+       tmpxy <- SpatialPoints(as.matrix(dat0[, c("x", "y")]), proj4string = CRS(projll))  ## project(as.matrix(dat[, c("x", "y")]), projection(prod))
+       suppressWarnings({
+         dat0$prodstart <- extract(readprod(min(jdates)), tmpxy)
+         dat0$prodend <- extract(readprod(max(jdates)), tmpxy)
+         dat0$ice <- extract(readice(date, setNA = FALSE), tmpxy)
+         dat0$ice[is.na(dat0$ice)] <- 0 ## for values out of bounds
+         dat0$mld <- extract(setExtent(readmld(date), extent(-180, 180, -90, -30)), tmpxy)
+       })
+       
+       bigdat <- bind_rows(bigdat, dat0)
+       
+     }
+   }
+   
+     
+   ## build a grid in equal area so we can smooth out the missing values a little
+   gr <- setValues(projectExtent(raster(ext, nrow = 50, ncol = 50, crs = projll), "+proj=laea +lat_0=-90"), 0)
+   save(bigdat, file = sprintf("bigdat_unfiltered_%s", levels(datefactor)[jdate]))
+   ## bigdat %>% arrange(bin_num)
+   bigdat <- bigdat %>% 
+     ## filter to non-missing prod and chla values
+     filter(!(is.na(prodstart) & is.na(prodend))) %>% 
+     filter( !is.na(chla)) %>% 
+     filter( !ice > 0) %>% 
+     ## and filter any bad values
+     filter(!is.na(mld) & ! is.na(ice) ) %>% 
+     mutate(prod = prodend - prodstart) %>% 
+     mutate(cell = cellFromXY(gr, project(cbind(x, y), projection(gr))))
+   
+   bigdat$cell <- cellFromXY(gr, project(as.matrix(bigdat[, c("x", "y")]), projection(gr)))
+   d1 <- bigdat %>% group_by(cell) %>% summarize(chla = mean(chla, na.rm = TRUE), 
+                                                 prodstart = sum(prodstart, na.rm = TRUE), 
+                                                 prodend = sum(prodend, na.rm = TRUE), 
+                                                 mld = mean(mld), 
+                                                 kd = mean(kd), 
+                                                 poc = sum(poc, na.rm = TRUE), 
+                                                 n = n(), date = levels(datefactor)[jdate])
+   print(jdate)
+   grdsumm <- bind_rows(grdsumm, d1)
+ save(grdsumm, file = "grdsumm.Rdata")
+   png("a.png")
+   op <- par(mfrow = n2mfrow(ncol(d1)))
+   for (ivar in names(d1)) {
+     if (ivar == "date") next
+     gr[1:ncell(gr)] <- 0
+     gr[d1$cell[!is.na(d1$cell)]] <- d1[[ivar]][!is.na(d1$cell)]
+     
+     pal <- chl.pal(palette  = TRUE)
+     if (ivar == "chla") plot(gr, col = pal$cols, breaks = pal$breaks, legend = FALSE) else plot(gr, col = pal$cols)
+     title(ivar)
+   }
+   par(op)
+   dev.off()
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 101
[1] 102
[1] 103
[1] 104
[1] 105
[1] 106
[1] 107
[1] 108
[1] 109
[1] 110
[1] 111
[1] 112
[1] 113
[1] 114
[1] 115
[1] 116
[1] 117
[1] 118
[1] 119
[1] 120
[1] 121
[1] 122
[1] 123
[1] 124
[1] 125
[1] 126
[1] 127
[1] 128
[1] 129
[1] 130
[1] 131
[1] 132
[1] 133
[1] 134
[1] 135
[1] 136
[1] 137
[1] 138
[1] 139
[1] 140
[1] 141
[1] 142
[1] 143
[1] 144
[1] 145
[1] 146
[1] 147
[1] 148
[1] 149
[1] 150
[1] 151
[1] 152
[1] 153
[1] 154
[1] 155
[1] 156
[1] 157
[1] 158
[1] 159
[1] 160
[1] 161
[1] 162
[1] 163
[1] 164
[1] 165
[1] 166
[1] 167
[1] 168
[1] 169
[1] 170
[1] 171
[1] 172
[1] 173
[1] 174
[1] 175
[1] 176
[1] 177
[1] 178
[1] 179
[1] 180
[1] 181
[1] 182
[1] 183
[1] 184
[1] 185
[1] 186
[1] 187
[1] 188
[1] 189
[1] 190
[1] 191
[1] 192
[1] 193
Error in extract(readprod(max(jdates)), tmpxy) : 
  error in evaluating the argument 'x' in selecting a method for function 'extract': Error in .matchFiles(date, fdate[findex], findex, daytest = switch(timeres,  : 
  no data file within 4.0 days of 2001-12-04 14:00:00
Calls: readprod -> .processFiles -> .processDates -> .matchFiles
Execution halted
